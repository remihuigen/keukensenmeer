/**
 * Script to dynamically generate an index file for project data modules.
 *
 * Scans the `data/projects` directory for TypeScript files (excluding `index.ts`),
 * generates import statements for each, and creates a mapping object where each property key
 * is the base filename and the value is the imported data object with an added slug property.
 * The resulting `index.ts` enables runtime access of all data modules via a simple key lookup,
 * which is especially useful for environments (like Cloudflare Workers) that cannot use Node.js
 * filesystem APIs or dynamic imports at runtime.
 *
 * This script should be executed as a build step before compiling or deploying your Nuxt app.
 *
 * Example export (in generated index.ts):
 *   {
 *     "myproject": { ...project0, slug: "myproject" },
 *     "another": { ...project1, slug: "another" },
 *     ...
 *   }
 *
 * Usage:
 *   node scripts/generateProjectIndex.js
 *
 * @module generateProjectIndex
 */

import { readdirSync, writeFileSync } from 'node:fs'
import { basename, resolve } from 'node:path'
import { fileURLToPath } from 'node:url'

import slugify from 'slugify'

const __dirname = fileURLToPath(new URL('.', import.meta.url))
const projectsDir = resolve(__dirname, '../data/projects')
const outputFile = resolve(projectsDir, 'index.ts')

/**
 * Validates that all generated slugs are unique and throws a build-breaking error if duplicates are found.
 *
 * @param {Array<{file: string, slug: string}>} slugMappings - Array of file to slug mappings
 * @throws {Error} When duplicate slugs are detected - terminates the build process
 *
 * @example
 * validateUniqueSlugs([
 *   { file: 'kitchen modern.ts', slug: 'kitchen-modern' },
 *   { file: 'kitchen-modern.ts', slug: 'kitchen-modern' } // This would throw!
 * ])
 */
function validateUniqueSlugs(slugMappings) {
	const slugCounts = new Map()
	const duplicates = new Map()

	// Count slug occurrences and track duplicates
	for (const { file, slug } of slugMappings) {
		const count = (slugCounts.get(slug) ?? 0) + 1
		slugCounts.set(slug, count)

		if (count > 1) {
			if (!duplicates.has(slug)) {
				duplicates.set(slug, [])
			}
			duplicates.get(slug).push(file)
		} else if (count === 1) {
			// Add the first occurrence when we detect it's about to become a duplicate
			const existingFile = slugMappings.find((m) => m.slug === slug && m.file !== file)?.file
			if (existingFile && !duplicates.has(slug)) {
				duplicates.set(slug, [existingFile])
			}
		}
	}

	if (duplicates.size > 0) {
		console.error('\nüö® CRITICAL BUILD ERROR: DUPLICATE PROJECT SLUGS DETECTED! üö®')
		console.error(
			'================================================================================',
		)
		console.error('Multiple project files are generating identical slugs, which will cause')
		console.error('routing conflicts and data overwrites in the application.')
		console.error('')
		console.error('DUPLICATE SLUGS FOUND:')
		console.error('')

		for (const [slug, files] of duplicates) {
			console.error(`‚ùå Slug: "${slug}"`)
			console.error(`   Generated by ${files.length} files:`)
			files.forEach((file) => {
				console.error(`   ‚Ä¢ ${file}`)
			})
			console.error('')
		}

		console.error('RESOLUTION REQUIRED:')
		console.error('1. Rename the conflicting project files to have unique names')
		console.error('2. Ensure file names create URL-safe, unique slugs when processed')
		console.error('3. Avoid special characters, spaces, and similar naming patterns')
		console.error('')
		console.error('Examples of good file names:')
		console.error('‚Ä¢ kitchen-modern-oak.ts')
		console.error('‚Ä¢ bathroom-luxury-marble.ts')
		console.error('‚Ä¢ office-minimalist-2024.ts')
		console.error('')
		console.error('BUILD TERMINATED - Fix duplicate slugs before continuing!')
		console.error(
			'================================================================================',
		)

		const duplicateList = Array.from(duplicates.keys()).join(', ')
		throw new Error(
			`BUILD FAILED: ${duplicates.size} duplicate project slug(s) detected. ` +
				`Rename conflicting files: ${duplicateList}`,
		)
	}
}

/**
 * Generates an index file that exports all project data modules with slug properties.
 *
 * @description Creates a mapping of project data files with auto-generated slug properties
 * based on the filename. Each project object is enhanced with a slug field derived from
 * its filename (without extension). Validates slug uniqueness to prevent routing conflicts.
 * All projects conform to the Project type interface defined in shared/types/project.ts.
 *
 * @throws {Error} When unable to read projects directory, write index file, or duplicate slugs are detected
 *
 * @example
 * // Input files: kitchen-modern.ts, bathroom-luxury.ts
 * // Output:
 * // {
 * //   "kitchen-modern": { ...projectData, slug: "kitchen-modern" },
 * //   "bathroom-luxury": { ...projectData, slug: "bathroom-luxury" }
 * // }
 */
function generateIndex() {
	try {
		// Read TypeScript files in projects directory (excluding index.ts)
		// eslint-disable-next-line security/detect-non-literal-fs-filename
		const files = readdirSync(projectsDir).filter(
			(file) => file.endsWith('.ts') && file !== 'index.ts',
		)

		if (files.length === 0) {
			console.warn('‚ö†Ô∏è  No TypeScript project files found in', projectsDir)
			return
		}

		// Generate slugs and validate uniqueness
		const slugMappings = files.map((file) => {
			const baseName = basename(file, '.ts')
			const slug = slugify(baseName, {
				lower: true,
				strict: true,
				locale: 'nl',
			})
			return { file, slug, baseName }
		})

		// Validate for duplicate slugs - this will throw and terminate build if duplicates found
		validateUniqueSlugs(slugMappings)

		// Build import statements and export mapping with slug enhancement
		const imports = []
		const exports = []

		slugMappings.forEach(({ slug, baseName }, index) => {
			const varName = `project${index}`
			const importPath = `./${baseName}` // Remove .ts extension

			imports.push(`import ${varName} from '${importPath}';`)
			exports.push(`  '${slug}': { ...${varName}, slug: '${slug}' },`)
		})

		const content = `// Auto-generated file - do not edit manually
// Generated by scripts/generateProjectIndex.js

import type { Project } from '~~/shared/types/project';

${imports.join('\n')}

/**
 * Exported project data modules indexed by filename with slug properties
 * 
 * @description Runtime-accessible mapping of all project data files.
 * Each project object is enhanced with a 'slug' property derived from its filename.
 * This enables URL-friendly routing and identification of projects.
 * All projects conform to the Project type interface.
 * 
 * @example
 * // Access project by key
 * const project = projects['kitchen-modern']
 * console.log(project.slug) // "kitchen-modern"
 * 
 * // Get all project slugs  
 * const slugs = Object.keys(projects) as ProjectKey[]
 */
const projects: Record<string, Project> = {
${exports.join('\n')}
} as const;

export default projects;

/**
 * Type representing valid project keys (slugs)
 * @description Union type of all available project slugs
 */
export type ProjectKey = keyof typeof projects;
`

		// eslint-disable-next-line security/detect-non-literal-fs-filename
		writeFileSync(outputFile, content)

		// eslint-disable-next-line security-node/detect-crlf
		console.log(`‚úÖ Generated ${outputFile} with ${files.length} projects:`)
		slugMappings.forEach(({ slug }) => {
			// eslint-disable-next-line security-node/detect-crlf
			console.log(`   - ${slug}`)
		})

		 
		console.log("\nüìù Each project now includes a 'slug' property for URL routing")
		 
		console.log('üîç All slugs validated as unique - no conflicts detected!')
		 
		console.log('‚ú® Type safety enforced: all projects satisfy Project interface')
	} catch (error) {
		console.error('‚ùå Failed to generate project index:', error.message)

		if (error.message.includes('duplicate project slug')) {
			// Re-throw duplicate slug errors to maintain exit code
			throw error
		}

		console.error('   Make sure the data/projects directory exists and is readable')
		process.exit(1)
	}
}

generateIndex()
